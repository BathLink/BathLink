name: Test and Deploy CDK

on:
  workflow_dispatch:
  push:
    paths:
      - 'Backend/**'
  pull_request:
    paths:
      - 'Backend/**'

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: |
            Backend/requirements.txt
            Backend/requirements-dev.txt

      - name: Install Dependencies
        run: |
          pip install -r Backend/requirements.txt
          pip install -r Backend/requirements-dev.txt

      - name: Run Unit Tests
        run: pytest Backend/tests/unit --junitxml=results/unit-results.xml --cov=Backend/tests/unit --cov-report=xml:results/unit-coverage/coverage.xml --cov-report=html:results/unit-coverage

      - name: Upload Unit Results
        uses: actions/upload-artifact@v4
        with:
          name: unit-results
          path: results/unit-results.xml

      - name: Upload Unit Coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage
          path: results/unit-coverage

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: |
            Backend/requirements.txt
            Backend/requirements-dev.txt

      - name: Install Dependencies
        run: |
          pip install -r Backend/requirements.txt
          pip install -r Backend/requirements-dev.txt

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Synthesize CDK
        run: |
          cd Backend/cdk
          cdk synth

      - name: Run Local API with SAM
        run: | 
          cd Backend/cdk
          sam local start-api -t cdk.out/CdkStack.template.json/ &
          sleep 10
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2

      - name: Run Integration Tests
        run: |
          pytest Backend/tests/integration --junitxml=results/integration-results.xml --cov=Backend/tests/integration --cov-report=xml:results/integration-coverage/coverage.xml --cov-report=html:results/integration-coverage

      - name: Upload Integration Results
        uses: actions/upload-artifact@v4
        with:
          name: integration-results
          path: results/integration-results.xml
        
      - name: Upload Integration Coverage
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage
          path: results/integration-coverage

  deploy:
    name: Deploy CDK
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: |
            Backend/requirements.txt
            Backend/requirements-dev.txt

      - name: Install Dependencies
        run: |
          pip install -r Backend/requirements.txt
          pip install -r Backend/requirements-dev.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Deploy CDK Stack
        run: |
          cd Backend/cdk
          cdk deploy --require-approval never 2>&1 | tee ../../results/cdk-deploy.log
        shell: bash

  e2e:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: |
            Backend/requirements.txt
            Backend/requirements-dev.txt

      - name: Install Dependencies
        run: |
          pip install -r Backend/requirements.txt
          pip install -r Backend/requirements-dev.txt

      - name: Run E2E Tests
        run: |
          pytest Backend/tests/e2e --junitxml=results/e2e-results.xml --cov=Backend/tests/e2e --cov-report=xml:results/e2e-coverage/coverage.xml --cov-report=html:results/e2e-coverage

      - name: Upload Integration Results
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results
          path: results/e2e-results.xml

      - name: Upload Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: e2e-coverage
          path: results/e2e-coverage


   
  report:
    name: Generate and Upload Report
    runs-on: ubuntu-latest
    needs: [unit-tests,integration-tests, e2e]
    if: always()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Unit Test Results
        uses: actions/download-artifact@v4
        with:
          name: unit-results.xml
          path: results/unit-results.xml

      - name: Download Unit Coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-coverage.xml
          path: results/unit-coverage/coverage.xml
        
      - name: Download Integration Test Results
        uses: actions/download-artifact@v4
        with:
          name: integration-results.xml
          path: results/integration-results.xml

      - name: Download Integration Coverage
        uses: actions/download-artifact@v4
        with:
          name: integration-coverage.xml
          path: results/integration-coverage/coverage.xml
      
      - name: Download E2E Test Results
        uses: actions/download-artifact@v4
        with:
          name: e2e-results.xml
          path: results/e2e-results.xml

      - name: Download E2E Coverage
        uses: actions/download-artifact@v4
        with:
          name: e2e-coverage.xml
          path: results/e2e-coverage/coverage.xml

      - name: Create Report
        run: |
          python Backend/scripts/generate_workflow_report.py
          cat results/workflow-report.md >> $GITHUB_STEP_SUMMARY

      - name: Upload Report File
        uses: actions/upload-artifact@v4
        with:
          name: workflow-report
          path: results/workflow-report.md